// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())

    email String @unique
    hash String
    name String?

    createdAt DateTime @default(now()) 
    updatedAt DateTime @updatedAt

    clients Client[]
    campaigns Campaign[]

    @@map("users")
}

model Client {
    id Int @id @default(autoincrement())

    name String @unique
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users User[]
    campaigns Campaign[]

    @@map("clients")
}

model Campaign {
    id Int @id @default(autoincrement())

    name String
    slug String?
    theme String?
    isPublished Boolean @default(false)
    isTemplate Boolean @default(false)
    from DateTime?
    to DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    clientId Int
    client Client @relation(fields: [clientId], references: [id])

    userId Int
    user User @relation(fields: [userId], references: [id])

    participant Participant[]
    settings Field[] @relation("settings")
    content Field[] @relation("content")
    
    @@map("campaigns")
}

model Participant {
    id Int @id @default(autoincrement())

    key String @unique @default(uuid())
    email String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    campaigns Campaign[]
    
    @@map("participants")
}

model Field {
    id Int @id @default(autoincrement())

    container String
    type String
    name String
    label String
    value String? @db.Text
    options String? @db.Text
    description String? @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // this until prisma supports polymorphic Associations https://github.com/prisma/prisma/issues/1644
    campaignContentId Int?
    campaignSettingId Int?
    campaignContent Campaign?  @relation("content", fields: [campaignContentId], references: [id])
    campaignSetting Campaign?  @relation("settings", fields: [campaignSettingId], references: [id])

    @@map("fields")
}
